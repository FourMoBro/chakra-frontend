[{"D:\\CodingProjects\\chakra-ui\\frontend\\src\\ColorModeSwitcher.js":"1","D:\\CodingProjects\\chakra-ui\\frontend\\src\\Logo.js":"2","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\columns.js":"3","D:\\CodingProjects\\chakra-ui\\frontend\\src\\App.js":"4","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\BasicTable.jsx":"5","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\GlobalFilter.jsx":"6","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\ColumnFilter.jsx":"7","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\CheckboxCol.jsx":"8","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\TextError.jsx":"9","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\CheckboxGroup.jsx":"10","D:\\CodingProjects\\chakra-ui\\frontend\\src\\index.js":"11","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\BasicInput.jsx":"12","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\Register.jsx":"13"},{"size":617,"mtime":1610650749353,"results":"14","hashOfConfig":"15"},{"size":489,"mtime":1610650749353,"results":"16","hashOfConfig":"15"},{"size":732,"mtime":1610679777353,"results":"17","hashOfConfig":"15"},{"size":555,"mtime":1610682247211,"results":"18","hashOfConfig":"15"},{"size":5900,"mtime":1610679821017,"results":"19","hashOfConfig":"15"},{"size":710,"mtime":1610679700727,"results":"20","hashOfConfig":"15"},{"size":444,"mtime":1610658338802,"results":"21","hashOfConfig":"15"},{"size":457,"mtime":1610670901218,"results":"22","hashOfConfig":"15"},{"size":144,"mtime":1610551195448,"results":"23","hashOfConfig":"15"},{"size":987,"mtime":1610551240527,"results":"24","hashOfConfig":"15"},{"size":843,"mtime":1610682217169,"results":"25","hashOfConfig":"15"},{"size":1017,"mtime":1610553526943,"results":"26","hashOfConfig":"15"},{"size":2270,"mtime":1610682442699,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"44x4f2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\CodingProjects\\chakra-ui\\frontend\\src\\ColorModeSwitcher.js",[],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\Logo.js",[],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\columns.js",["57"],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\App.js",["58","59","60","61","62","63","64","65","66"],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\BasicTable.jsx",["67","68","69","70","71"],"import React, { useMemo } from 'react'\r\nimport { useTable, useSortBy, useGlobalFilter, useFilters, usePagination, useRowSelect } from 'react-table'\r\nimport MOCK_DATA from './MOCK_DATA.json'\r\nimport { COLUMNS } from './columns'\r\nimport { GlobalFilter } from './GlobalFilter'\r\nimport { CheckboxCol } from './CheckboxCol'\r\n\r\nimport { Button, Text,  Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\"\r\nimport { ArrowLeftIcon, ArrowRightIcon, TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\"\r\nimport { Select, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper } from \"@chakra-ui/react\"\r\nexport const BasicTable = () => {\r\n\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n    const tableInstance = useTable({ columns, data },  useFilters, useGlobalFilter, useSortBy, usePagination, useRowSelect,\r\n        hooks => {\r\n            hooks.visibleColumns.push(columns => [\r\n                {\r\n                    id: 'selection',\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                        <CheckboxCol {...getToggleAllRowsSelectedProps()} />\r\n                    ),\r\n                    Cell: ({ row }) => <CheckboxCol {...row.getToggleRowSelectedProps()} />\r\n                },\r\n                ...columns\r\n            ])\r\n        })\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        setPageSize,\r\n        prepareRow,\r\n        selectedFlatRows,\r\n        state,\r\n        setGlobalFilter,\r\n    } = tableInstance\r\n\r\n    const { pageIndex, pageSize, globalFilter } = state\r\n\r\n    return (\r\n\r\n        <>\r\n            {/* <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} /> */}\r\n            <Table {...getTableProps()}>\r\n                <Thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <Tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                            <Th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                                {column.render('Header')}\r\n                                <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                <chakra.span pl=\"4\">\r\n                                {column.isSorted ? (\r\n                                column.isSortedDesc ? (\r\n                                <TriangleDownIcon aria-label=\"sorted descending\" />\r\n                                ) : (\r\n                                <TriangleUpIcon aria-label=\"sorted ascending\" />\r\n                                )\r\n                                ) : null}\r\n                                </chakra.span>\r\n\r\n                            </Th>\r\n                            ))}                    \r\n                    </Tr>\r\n                    ))}                \r\n                </Thead>\r\n                <Tbody {...getTableBodyProps()}>\r\n                    {page.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <Tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <Td {...cell.getCellProps()}>{cell.render('Cell')}</Td>\r\n                                })}\r\n                            </Tr>\r\n                        )\r\n                    })}\r\n                    \r\n                </Tbody>\r\n            </Table>\r\n\r\n            <div>\r\n                <chakra.span>\r\n                    <Text>Page{' '}\r\n                    <strong>\r\n                        {pageIndex + 1} of {pageOptions.length}\r\n                    </strong> {' '}\r\n                    </Text>\r\n                </chakra.span>\r\n                <chakra.span>\r\n                    | Go to page:{' '}\r\n                    <NumberInput defaultValue={pageIndex + 1} min={1} max={pageCount} \r\n                    onChange={(valueString) => {\r\n                        const pageNumber = valueString ? Number(valueString) - 1 : 0\r\n                        gotoPage(pageNumber)\r\n                    }}\r\n                    >\r\n                        <NumberInputField />\r\n                        <NumberInputStepper>\r\n                            <NumberIncrementStepper />\r\n                            <NumberDecrementStepper />\r\n                        </NumberInputStepper>\r\n                    </NumberInput>\r\n                </chakra.span>\r\n                <chakra.span>\r\n                    <Select value={pageSize}\r\n                    onChange={(e) => setPageSize(Number(e.target.value))}>\r\n                        {[10, 25, 50].map((pageSize) => (\r\n                            <option key={pageSize} value={pageSize}>\r\n                                Show {pageSize}\r\n                            </option>\r\n                        ))}\r\n                    </Select>\r\n                </chakra.span>\r\n                <Button onClick={() => gotoPage(0)} disabled={!canPreviousPage}><ArrowLeftIcon /></Button>\r\n                <Button variant=\"outlined\" onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</Button>\r\n                <Button variant=\"outlined\" onClick={() => nextPage()} disabled={!canNextPage}>Next</Button>\r\n                <Button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}><ArrowRightIcon /></Button>\r\n            </div>\r\n        </>\r\n)\r\n}\r\n// use the selectedFlatRows to send the data back to the API endpoint\r\n{/* <pre>\r\n<code>\r\n  {JSON.stringify(\r\n    {\r\n      selectedFlatRows: selectedFlatRows.map(row => row.original)\r\n    },\r\n    null,\r\n    2\r\n  )}\r\n</code>\r\n</pre> */}",["72","73"],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\GlobalFilter.jsx",[],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\ColumnFilter.jsx",["74"],"import React from 'react'\r\nimport { Input, Text } from \"@chakra-ui/react\"\r\n\r\nexport const ColumnFilter = (props) => {\r\n    const { column } = props\r\n    const { filterValue, setFilter } = column\r\n    return (\r\n        <span>\r\n            {/* <Text as=\"mark\">Search:{' '}</Text> */}\r\n            <Input size=\"xs\" placeholder=\"Search this column\" value={filterValue || ''} onChange={(e) => setFilter(e.target.value)} />\r\n        </span>\r\n    )\r\n}","D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\tables\\CheckboxCol.jsx",["75"],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\TextError.jsx",[],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\CheckboxGroup.jsx",[],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\index.js",["76"],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\BasicInput.jsx",["77","78","79"],"D:\\CodingProjects\\chakra-ui\\frontend\\src\\components\\formik-elements\\Register.jsx",[],{"ruleId":"80","severity":1,"message":"81","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":15},{"ruleId":"80","severity":1,"message":"84","line":4,"column":3,"nodeType":"82","messageId":"83","endLine":4,"endColumn":6},{"ruleId":"80","severity":1,"message":"85","line":5,"column":3,"nodeType":"82","messageId":"83","endLine":5,"endColumn":7},{"ruleId":"80","severity":1,"message":"86","line":6,"column":3,"nodeType":"82","messageId":"83","endLine":6,"endColumn":7},{"ruleId":"80","severity":1,"message":"87","line":7,"column":3,"nodeType":"82","messageId":"83","endLine":7,"endColumn":9},{"ruleId":"80","severity":1,"message":"88","line":8,"column":3,"nodeType":"82","messageId":"83","endLine":8,"endColumn":7},{"ruleId":"80","severity":1,"message":"89","line":9,"column":3,"nodeType":"82","messageId":"83","endLine":9,"endColumn":7},{"ruleId":"80","severity":1,"message":"90","line":12,"column":10,"nodeType":"82","messageId":"83","endLine":12,"endColumn":27},{"ruleId":"80","severity":1,"message":"91","line":13,"column":10,"nodeType":"82","messageId":"83","endLine":13,"endColumn":14},{"ruleId":"80","severity":1,"message":"92","line":15,"column":8,"nodeType":"82","messageId":"83","endLine":15,"endColumn":23},{"ruleId":"80","severity":1,"message":"93","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":22},{"ruleId":"80","severity":1,"message":"94","line":44,"column":9,"nodeType":"82","messageId":"83","endLine":44,"endColumn":25},{"ruleId":"80","severity":1,"message":"95","line":46,"column":9,"nodeType":"82","messageId":"83","endLine":46,"endColumn":24},{"ruleId":"80","severity":1,"message":"96","line":49,"column":34,"nodeType":"82","messageId":"83","endLine":49,"endColumn":46},{"ruleId":"97","severity":1,"message":"98","line":135,"column":1,"nodeType":"99","messageId":"100","endLine":145,"endColumn":11},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"80","severity":1,"message":"85","line":2,"column":17,"nodeType":"82","messageId":"83","endLine":2,"endColumn":21},{"ruleId":"80","severity":1,"message":"105","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":18},{"ruleId":"80","severity":1,"message":"106","line":1,"column":10,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"107","line":2,"column":17,"nodeType":"82","messageId":"83","endLine":2,"endColumn":29},{"ruleId":"80","severity":1,"message":"108","line":4,"column":59,"nodeType":"82","messageId":"83","endLine":4,"endColumn":73},{"ruleId":"109","severity":1,"message":"110","line":21,"column":13,"nodeType":"111","messageId":"112","endLine":25,"endColumn":27},"no-unused-vars","'color' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Text' is defined but never used.","'Link' is defined but never used.","'VStack' is defined but never used.","'Code' is defined but never used.","'Grid' is defined but never used.","'ColorModeSwitcher' is defined but never used.","'Logo' is defined but never used.","'FormikContainer' is defined but never used.","'GlobalFilter' is defined but never used.","'selectedFlatRows' is assigned a value but never used.","'setGlobalFilter' is assigned a value but never used.","'globalFilter' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-native-reassign",["113"],"no-negated-in-lhs",["114"],"'Checkbox' is defined but never used.","'ColorModeScript' is defined but never used.","'ErrorMessage' is defined but never used.","'FormHelperText' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","no-global-assign","no-unsafe-negation"]